{"name":"Moip","tagline":"This is a package of a payment intermediary called MOIP","body":"# MoIP (Laravel Package)\r\n----------------------\r\n\r\n[![Latest Stable Version](https://poser.pugx.org/sostheblack/moip/v/stable.svg)](https://packagist.org/packages/sostheblack/moip) [![Total Downloads](https://poser.pugx.org/sostheblack/moip/downloads.svg)](https://packagist.org/packages/sostheblack/moip) [![Latest Unstable Version](https://poser.pugx.org/sostheblack/moip/v/unstable.svg)](https://packagist.org/packages/sostheblack/moip) [![License](https://poser.pugx.org/sostheblack/moip/license.svg)](https://packagist.org/packages/sostheblack/moip)\r\n\r\nIntegrates via API, your e-commerce with MoIP quickly and easily\r\n\r\n- `Moip::sendMoip($data);`\r\n- `Moip::response`;\r\n\r\nand response\r\n\r\n- `public 'response' => true`\r\n- `public 'error' => false`\r\n- `public 'token' => 'J2E011C4K15150C2Y093Q5R0B0K1C2U7H4A0C070V0P0N0Y6W2X8G1T3M0R9'`\r\n- `public 'payment_url' => do?token=J2E011C4K15150C2Y093Q5R0B0K1C2U7H4A0C070V0P0N0Y6W2X8G1T3M0R9'`\r\n- `public 'xmlSend' => '<?xml version=\"1.0\" encoding=\"utf-8\"?>... </EnviarInstrucao>'`\r\n- `public 'xmlGet' => '<ns1:EnviarInstrucaoUnicaResponse...</ns1:EnviarInstrucaoUnicaResponse>'`\r\n\r\n## Instalation\r\n\r\n### Laravel 4.2 and Blow\r\n\r\nBegin by installing this package through Composer. Edit your project's `composer.json` file to require `sostheblack/moip`.\r\n\r\nsoon in version v1.*\r\n\r\n    \"require-dev\": {\r\n        \"sostheblack/moip\": \"1.*\"\r\n    }\r\n\r\nNext, update Composer from the Terminal:\r\n\r\n    $ composer update\r\n\r\nOnce that's been completed, the next step operation is to copy the file that is in moip.php `vendor/sostheblack/src/config/moip.php` and Paste in `app/config`\r\n\r\nMake the necessary settings and proceed to the next step\r\n\r\nOnce this operation completes, the final step is to add the service provider and facade. Open `app/config/app.php`.\r\n\r\nAdd a new item to the providers array.\r\n\r\n    'providers' => array(\r\n        'Illuminate\\Foundation\\Providers\\ArtisanServiceProvider',\r\n        'Illuminate\\Auth\\AuthServiceProvider',\r\n        ...\r\n        'SOSTheBlack\\Moip\\ServiceProvider',\r\n    ),\r\n\r\nAdd a new item to the facades array.\r\n\r\n    'aliases' => array(\r\n        'App'        => 'Illuminate\\Support\\Facades\\App',\r\n        'Artisan'    => 'Illuminate\\Support\\Facades\\Artisan',\r\n        ...\r\n        'Moip'       => 'SOSTheBlack\\Moip\\Facade',\r\n    ),\r\n\r\n## Usage\r\n\r\n### simple\r\n\r\nSent only the total sale, is configured to send data in `app/config/moip.php`\r\n\r\n    $data = ['values' => ['value' => $full_price_products] ];\r\n    try {\r\n        $moip = Moip::sendMoip($data);\r\n    } catch (Exception $e) {\r\n        echo $e->getMessage();\r\n    }\r\n\r\n### Advanced\r\n\r\nFully customize the data sent!\r\n\r\n    $data = [\r\n        'unique_id' => 100000001,\r\n        'reason'    => 'market of Natal 01',\r\n        'receiver'  => 'jean@comunicaweb.com.br',\r\n        'parcel'    => ['min' => 2, 'max' => 12, 'rate' => 1.5, 'transfer' => true],\r\n        'values'    => ['value' => $full_price_products , 'adds' => $freight, 'deduct'=> $coupon],\r\n    ];\r\n    try {\r\n        $moip = Moip::sendMoip($data);\r\n    } catch (Exception $e) {\r\n        echo $e->getMessage();\r\n    }\r\n\r\n## Sending parameters\r\n\r\n#### values\r\n##### $full_price_products: Number, $freight: Number, $coupon: Number\r\n\r\n1. $full_price_products: Responsible for setting the value that should be paid.\r\n2. $freigth: Responsible for defining the additional amount to be paid.\r\n3. $deduct: Responsible for defining the value of discount will be subtracted from the total to be paid.\r\n\r\n\r\n    $data['values'] => [\r\n        'value'     => $full_price_products,\r\n        'adds'      => $freigth,\r\n        'dedudct'   => $deduct\r\n    ];\r\n\r\n#### unique_id\r\n##### $id: String\r\n\r\nIts unique identifier request this same information will be sent to you on our notification of changes in status so that you can identify and treat your application status.\r\n\r\n    $data['unique_id'] = $id;\r\n\r\n#### reason\r\n##### $value: String\r\n\r\nResponsible for defining the reason for the payment\r\n\r\n    $data['reason'] => $value;\r\n\r\n#### receiver\r\n##### $receiver String\r\n\r\nIdentifies the user who will receive payment in MoIP\r\n\r\n    $data['receiver'] = $receiver\r\n\r\n#### parcel\r\n##### $min: Number, $max: Number, $rate : Number, $transfer : Boolean\r\n\r\nResponsible for the installment which will be available to the paying options.\r\n\r\n1. $min : Minimum number of plots available to the paying.\r\n2. $max : Maximum amount of shares available to the paying.\r\n3. $rate : Amount of interest a.m per parcel.\r\n4. $transfer : If `true` sets the default value of the interest will be paid by the paying MOIP.\r\n\r\n    $data['parcel'] => [\r\n        'min'       => 2, \r\n        'max'       => 12, \r\n        'rate'      => 1.5, \r\n        'transfer'  => false\r\n    ];\r\n\r\n### Data Response\r\n\r\nMethod | Response\r\n-------|----------\r\n$moip->error | false or error message\r\n$moip->response | true or false\r\n$moip->token | token request\r\n$moip->payment_url | payment url\r\n$moip->xmlSend | xml sent\r\n$moip->xmlGet | xml reponse\r\nMoip::response() | object equal to all previous methods\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}